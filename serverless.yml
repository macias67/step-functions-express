# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: step-functions-express
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

useDotenv: true

# Deprecations
#variablesResolutionMode: 20210326

provider:
  name: aws
  runtime: nodejs12.x

# you can overwrite defaults here
  stage: ${env:STAGE}
  region: ${env:REGION}
  stackName: step-functions-express
  apiName: step-functions-express-${sls:stage} # Use a custom name for the API Gateway API
  memorySize: 128
  timeout: 10
  logRetentionInDays: 1
  deploymentBucket:
    name: moscloud.sls.${self:provider.region}.deploys
    tags: # Tags that will be added to each of the deployment resources
      environment: dev
      project: ${self:custom.projectName}
  deploymentPrefix: serverless # The S3 prefix under which deployed artifacts should be stored. Default is serverless
  lambdaHashingVersion: 20201221
  versionFunctions: true
  stackTags: # Optional CF stack tags
    stage: ${sls:stage}
    project: ${self:custom.projectName}
  
#  apiGateway:
#    description: API REST for step-functions-express ${sls:stage}
#    # apiKeySourceType: HEADER # Source of API key for usage plan. HEADER or AUTHORIZER.
#    apiKeys: # List of API keys to be used by your service API Gateway REST API
#      - name: step-functions-express-api-key-${sls:stage}
#        value: ${env:API_KEY}
#        description: API key for step-functions-express ${sls:stage}
#      #  customerId: myFirstKeyCustomerId
#    usagePlan: # Optional usage plan configuration
#      quota:
#        limit: 100
#      #  offset: 2
#        period: DAY
#      throttle:
#        burstLimit: 20
#        rateLimit: 10

# you can add statements to the Lambda function's IAM Role here
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "s3:ListBucket"
            - "s3:GetObject"
          Resource: arn:aws:s3:::${self:custom.bucket}/*
        - Effect: "Allow"
          Action:
            - "sqs:SendMessage"
          Resource:
            Fn::GetAtt: [QueueSQS, Arn]
      tags:
        project: ${self:custom.projectName}
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

custom:
  functionsBasePath: src/handlers
  prune:
    automatic: true
    number: 3
  bucket: movies-file-${sls:stage}
  projectName: step-functions-express
  prefixProject: sfe

# you can add packaging information here
package:
  individually: true
  excludeDevDependencies: true
  patterns:
    - "!local/**"
    - "!.vscode/**"
    - "!node_modules/**/**.md"
    - "!node_modules/**/test/**"
    - "!node_modules/**/LICENSE"
    - "!node_modules/**/LICENCE"
    - "!node_modules/**/License"
    - "!node_modules/**/license"
    - "!node_modules/**/Makefile"
    - "!node_modules/**/**.ts"
    - "!node_modules/**/package-lock.json"
    - "!node_modules/**/aws-sdk/**"
    - "!./yarn.*"
    - "!./**.md"
    - "!./package.json"
    - "!./package-lock.json"
    - "!.git/**"
    - "!.travis.yml"

plugins:
  - serverless-dotenv-plugin
  - serverless-prune-plugin
  - serverless-plugin-include-dependencies
  - serverless-functions-base-path

functions:
  hello:
      handler: handler.hello
      name: ${self:custom.prefixProject}-hello-${sls:stage}
      timeout: 15
      reservedConcurrency: 5
      events:
        - http:
            path: hello
            method: get
  readFile:
    handler: readFile.index
    name: ${self:custom.prefixProject}-readFile-${sls:stage}
    timeout: 240
    memorySize: 512
    description: Triggered function to read files from bucket ${self:custom.bucket}
    events:
      - s3:
          bucket:
            Ref: MoviesFilesBucket
          event: s3:ObjectCreated:*
          rules:
            - suffix: .json
          existing: true
    environment:
      SQS_ARN:
        Fn::GetAtt: [QueueSQS, Arn]
      SQS_URL: { Ref: QueueSQS }
  sqsConsumer:
    handler: sqsConsumer.index
    name: ${self:custom.prefixProject}-sqsConsumer-${sls:stage}
    description: SQS Consumer
    reservedConcurrency: 5
    events:
      - sqs:
          arn:
            Fn::GetAtt: [QueueSQS, Arn]
          batchSize: 100
          maximumBatchingWindow: 5 # Seconds to wait for a batch
    environment:
      SQS_ARN:
        Fn::GetAtt: [QueueSQS, Arn]
      SQS_URL: { Ref: QueueSQS }

# you can add CloudFormation resource templates here
resources:
  Resources:
    MoviesFilesBucket:
      Type: AWS::S3::Bucket
      Properties: 
        BucketName: ${self:custom.bucket}
        VersioningConfiguration:
          Status: Suspended
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
        Tags:
          - Key: project
            Value: ${self:provider.stackName}
          - Key: environment
            Value: ${sls:stage}
    QueueSQS:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.prefixProject}-queue-${sls:stage}
        #DelaySeconds: 5
        #MessageRetentionPeriod: 600 #seconds
        #ReceiveMessageWaitTimeSeconds: 5
        #RedrivePolicy:
          #deadLetterTargetArn: arn
          #maxReceiveCount: 2
          #VisibilityTimeout: 30 #seconds
        Tags:
          - Key: project
            Value: ${self:provider.stackName}
          - Key: environment
            Value: ${sls:stage}
#    CognitoUserPool:
#      Type: AWS::Cognito::UserPool
#      Properties:
#        UserPoolName: sls-user-pool-${sls:stage}
#        UsernameAttributes: 
#          - email
#        AutoVerifiedAttributes:
#          - email
#    CognitoUserPoolClient:
#      Type: AWS::Cognito::UserPoolClient
#      Properties:
#          ClientName: sls-user-pool-client-${sls:stage}
#          UserPoolId:
#            Ref: CognitoUserPool
#          ExplicitAuthFlows:
#            - ADMIN_NO_SRP_AUTH
#          GenerateSecret: false
#          PreventUserExistenceErrors: LEGACY
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
