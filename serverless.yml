# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: step-functions-express
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

useDotenv: true

# Deprecations
#variablesResolutionMode: 20210326

provider:
  name: aws
  runtime: nodejs12.x

# you can overwrite defaults here
  stage: ${env:STAGE}
  region: ${env:REGION}
  stackName: step-functions-express
  apiName: step-functions-express-${sls:stage} # Use a custom name for the API Gateway API
  memorySize: 128
  timeout: 10
  logRetentionInDays: 1
  deploymentBucket:
    name: moscloud.sls.${self:provider.region}.deploys
    tags: # Tags that will be added to each of the deployment resources
      environment: dev
      project: step-functions-express
  deploymentPrefix: serverless # The S3 prefix under which deployed artifacts should be stored. Default is serverless
  lambdaHashingVersion: 20201221
  versionFunctions: true
  stackTags: # Optional CF stack tags
    stage: ${sls:stage}
    project: step-functions-express
  
#  apiGateway:
#    description: API REST for step-functions-express ${sls:stage}
#    # apiKeySourceType: HEADER # Source of API key for usage plan. HEADER or AUTHORIZER.
#    apiKeys: # List of API keys to be used by your service API Gateway REST API
#      - name: step-functions-express-api-key-${sls:stage}
#        value: ${env:API_KEY}
#        description: API key for step-functions-express ${sls:stage}
#      #  customerId: myFirstKeyCustomerId
#    usagePlan: # Optional usage plan configuration
#      quota:
#        limit: 100
#      #  offset: 2
#        period: DAY
#      throttle:
#        burstLimit: 20
#        rateLimit: 10

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

custom:
  functionsBasePath: src/handlers
  prune:
    automatic: true
    number: 3

# you can add packaging information here
package:
  individually: true
  excludeDevDependencies: true
  patterns:
    - "!local/**"
    - "!.vscode/**"
    - "!node_modules/**/**.md"
    - "!node_modules/**/test/**"
    - "!node_modules/**/LICENSE"
    - "!node_modules/**/LICENCE"
    - "!node_modules/**/License"
    - "!node_modules/**/license"
    - "!node_modules/**/Makefile"
    - "!node_modules/**/**.ts"
    - "!node_modules/**/package-lock.json"
    - "!node_modules/**/aws-sdk/**"
    - "!./yarn.*"
    - "!./**.md"
    - "!./package.json"
    - "!./package-lock.json"

plugins:
  - serverless-dotenv-plugin
  - serverless-prune-plugin
  - serverless-plugin-include-dependencies
  - serverless-functions-base-path

functions:
  hello:
    handler: handler.hello
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
    events:
      - http:
          path: hello
          method: get
          private: true
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    CognitoUserPool:
#      Type: AWS::Cognito::UserPool
#      Properties:
#        UserPoolName: sls-user-pool-${sls:stage}
#        UsernameAttributes: 
#          - email
#        AutoVerifiedAttributes:
#          - email
#    CognitoUserPoolClient:
#      Type: AWS::Cognito::UserPoolClient
#      Properties:
#          ClientName: sls-user-pool-client-${sls:stage}
#          UserPoolId:
#            Ref: CognitoUserPool
#          ExplicitAuthFlows:
#            - ADMIN_NO_SRP_AUTH
#          GenerateSecret: false
#          PreventUserExistenceErrors: LEGACY
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
